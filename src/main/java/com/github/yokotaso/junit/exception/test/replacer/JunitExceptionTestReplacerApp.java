package com.github.yokotaso.junit.exception.test.replacer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Objects;
import java.util.logging.Logger;
import java.util.stream.Collectors;

import org.assertj.core.util.Lists;

import com.github.javaparser.ParseProblemException;
import com.github.yokotaso.junit.exception.test.replacer.commands.CodeModification;
import com.github.yokotaso.junit.exception.test.replacer.commands.CommandExecutable;
import com.github.yokotaso.junit.exception.test.replacer.commands.CommandLineOptions;
import com.github.yokotaso.junit.exception.test.replacer.commands.annotations.ClassicAnnotationModifyCommand;
import com.github.yokotaso.junit.exception.test.replacer.commands.exception.ExceptionTestModifyCommand;
import com.google.devtools.common.options.OptionsParser;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class JunitExceptionTestReplacerApp {
    private static Logger logger = Logger.getLogger(JunitExceptionTestReplacerApp.class.getSimpleName());

    private static void doMain(String[] args) throws Exception {
        OptionsParser parser = OptionsParser.newOptionsParser(CommandLineOptions.class);
        parser.parse(args);
        CommandLineOptions commandLineOptions = parser.getOptions(CommandLineOptions.class);

        if (!commandLineOptions.input.equals("")) {
            File inputFile = Paths.get(commandLineOptions.input).toFile();
            List<File> inputFiles = Lists.newArrayList();
            if (inputFile.isFile()) {
                inputFiles.add(inputFile);
            } else {
                inputFiles.addAll(Files.walk(Paths.get(commandLineOptions.input))
                        .filter(Files::isRegularFile)
                        .map(Path::toFile)
                        .collect(Collectors.toList()));
            }

            CommandExecutable executable = null;
            if (commandLineOptions.replace.equals("exception-test")) {
                executable = new ExceptionTestModifyCommand();
            } else if (commandLineOptions.replace.equals("classic-annotation")) {
                executable = new ClassicAnnotationModifyCommand();
            } else {
                throw new IllegalArgumentException("unknown replace option:" + commandLineOptions.replace);
            }

            for (File input : inputFiles) {
                CodeModification codeModification;
                try (InputStream inputStream = new FileInputStream(input.getAbsolutePath())) {
                    codeModification = Objects.requireNonNull(executable).invokeCodeModification(inputStream);
                } catch (ParseProblemException e) {
                    logger.finer("Ignore: " + input.getAbsolutePath());
                    continue;
                }
                logger.finer("Input:" + input.getAbsolutePath());
                logger.finer("Output:" + input.getAbsolutePath());
                try (OutputStream outputStream = new FileOutputStream(input.getAbsolutePath())) {
                    executable.invokeApplyCodeModification(outputStream, Objects.requireNonNull(codeModification));
                }
            }
            return;
        }
    }


    public static void main(String[] args) throws Exception {
        doMain(args);
    }
}
